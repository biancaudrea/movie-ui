{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../../Constants';\nexport const moviesApi = {\n  getUserExtrasMe,\n  getMovie,\n  saveMovie,\n  deleteMovie,\n  addMovieComment,\n  saveUserExtrasMe\n};\n\nfunction getMovie(imdbId) {\n  return instance.get(`/api/movies/${imdbId}`);\n}\n\nfunction saveMovie(movie, token) {\n  return instance.post('/api/movies', movie, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n}\n\nfunction deleteMovie(imdbId, token) {\n  return instance.delete(`/api/movies/${imdbId}`, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n}\n\nfunction addMovieComment(imdbId, comment, token) {\n  return instance.post(`/api/movies/${imdbId}/comments`, comment, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  });\n}\n\nfunction getUserExtrasMe(token) {\n  return instance.get(`/api/users/details`, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n}\n\nfunction saveUserExtrasMe(token, userExtra) {\n  return instance.post(`/api/userextras/me`, userExtra, {\n    headers: {\n      'Authorization': bearerAuth(token)\n    }\n  });\n} // -- Axios\n\n\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n});\ninstance.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  if (error.response.status === 404) {\n    return {\n      status: error.response.status\n    };\n  }\n\n  return Promise.reject(error.response);\n}); // -- Helper functions\n\nfunction bearerAuth(token) {\n  return `Bearer ${token}`;\n}","map":{"version":3,"sources":["/home/bianca/Documents/workspace/repositories/reactapp-movies/springboot-react-keycloak/movies-ui/src/components/misc/MoviesApi.js"],"names":["axios","config","moviesApi","getUserExtrasMe","getMovie","saveMovie","deleteMovie","addMovieComment","saveUserExtrasMe","imdbId","instance","get","movie","token","post","headers","bearerAuth","delete","comment","userExtra","create","baseURL","url","API_BASE_URL","interceptors","response","use","error","status","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,eADuB;AAGvBC,EAAAA,QAHuB;AAIvBC,EAAAA,SAJuB;AAKvBC,EAAAA,WALuB;AAMvBC,EAAAA,eANuB;AAQvBC,EAAAA;AARuB,CAAlB;;AAaP,SAASJ,QAAT,CAAkBK,MAAlB,EAA0B;AACxB,SAAOC,QAAQ,CAACC,GAAT,CAAc,eAAcF,MAAO,EAAnC,CAAP;AACD;;AAED,SAASJ,SAAT,CAAmBO,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/B,SAAOH,QAAQ,CAACI,IAAT,CAAc,aAAd,EAA6BF,KAA7B,EAAoC;AACzCG,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiBC,UAAU,CAACH,KAAD;AAFpB;AADgC,GAApC,CAAP;AAMD;;AAED,SAASP,WAAT,CAAqBG,MAArB,EAA6BI,KAA7B,EAAoC;AAClC,SAAOH,QAAQ,CAACO,MAAT,CAAiB,eAAcR,MAAO,EAAtC,EAAyC;AAC9CM,IAAAA,OAAO,EAAE;AAAE,uBAAiBC,UAAU,CAACH,KAAD;AAA7B;AADqC,GAAzC,CAAP;AAGD;;AAED,SAASN,eAAT,CAAyBE,MAAzB,EAAiCS,OAAjC,EAA0CL,KAA1C,EAAiD;AAC/C,SAAOH,QAAQ,CAACI,IAAT,CAAe,eAAcL,MAAO,WAApC,EAAgDS,OAAhD,EAAyD;AAC9DH,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAiBC,UAAU,CAACH,KAAD;AAFpB;AADqD,GAAzD,CAAP;AAMD;;AAED,SAASV,eAAT,CAAyBU,KAAzB,EAAgC;AAC9B,SAAOH,QAAQ,CAACC,GAAT,CAAc,oBAAd,EAAmC;AACxCI,IAAAA,OAAO,EAAE;AAAE,uBAAiBC,UAAU,CAACH,KAAD;AAA7B;AAD+B,GAAnC,CAAP;AAGD;;AAED,SAASL,gBAAT,CAA0BK,KAA1B,EAAiCM,SAAjC,EAA4C;AAC1C,SAAOT,QAAQ,CAACI,IAAT,CAAe,oBAAf,EAAoCK,SAApC,EAA+C;AACpDJ,IAAAA,OAAO,EAAE;AAAE,uBAAiBC,UAAU,CAACH,KAAD;AAA7B;AAD2C,GAA/C,CAAP;AAGD,C,CAED;;;AAEA,MAAMH,QAAQ,GAAGV,KAAK,CAACoB,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEpB,MAAM,CAACqB,GAAP,CAAWC;AADQ,CAAb,CAAjB;AAIAb,QAAQ,CAACc,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CAAmCD,QAAQ,IAAI;AAC7C,SAAOA,QAAP;AACD,CAFD,EAEG,UAAUE,KAAV,EAAiB;AAClB,MAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjC,WAAO;AAAEA,MAAAA,MAAM,EAAED,KAAK,CAACF,QAAN,CAAeG;AAAzB,KAAP;AACD;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeH,KAAK,CAACF,QAArB,CAAP;AACD,CAPD,E,CASA;;AAEA,SAAST,UAAT,CAAoBH,KAApB,EAA2B;AACzB,SAAQ,UAASA,KAAM,EAAvB;AACD","sourcesContent":["import axios from 'axios'\nimport { config } from '../../Constants'\n\nexport const moviesApi = {\n  getUserExtrasMe,\n\n  getMovie,\n  saveMovie,\n  deleteMovie,\n  addMovieComment,\n\n  saveUserExtrasMe\n}\n\n\n\nfunction getMovie(imdbId) {\n  return instance.get(`/api/movies/${imdbId}`)\n}\n\nfunction saveMovie(movie, token) {\n  return instance.post('/api/movies', movie, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  })\n}\n\nfunction deleteMovie(imdbId, token) {\n  return instance.delete(`/api/movies/${imdbId}`, {\n    headers: { 'Authorization': bearerAuth(token) }\n  })\n}\n\nfunction addMovieComment(imdbId, comment, token) {\n  return instance.post(`/api/movies/${imdbId}/comments`, comment, {\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': bearerAuth(token)\n    }\n  })\n}\n\nfunction getUserExtrasMe(token) {\n  return instance.get(`/api/users/details`, {\n    headers: { 'Authorization': bearerAuth(token) }\n  })\n}\n\nfunction saveUserExtrasMe(token, userExtra) {\n  return instance.post(`/api/userextras/me`, userExtra, {\n    headers: { 'Authorization': bearerAuth(token) }\n  })\n}\n\n// -- Axios\n\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n})\n\ninstance.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  if (error.response.status === 404) {\n    return { status: error.response.status };\n  }\n  return Promise.reject(error.response);\n});\n\n// -- Helper functions\n\nfunction bearerAuth(token) {\n  return `Bearer ${token}`\n}"]},"metadata":{},"sourceType":"module"}